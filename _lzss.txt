LOOP:
    load flag byte
    for i = 1 to 8
        load byte
        shift flag byte
        if carry:
            handle run
        else:
            copy byte



Calls JsrInd for each byte written to buffer.
Algorithm ends when backref size is 0.
Backreference indexes are absolute, not relative offsets.


        ldx     #0
@outer:
        lda     #8
        sta     LzssFlagCount
        lda     (pCompressedDataL),y
        jsr     BumpPtr
@process_8_chunks:
        lsr
        sta     LzssFlags
        bcs     @backref
        ; Not a backref; copy one byte
        lda     (pCompressedDataL),y
        jsr     BumpPtr
        inx
        jsr     JsrInd
        jmp     @chunk_processed

@backref:
        ; Get backref length
        lda     (pCompressedDataL),y
        beq     @end
        jsr     BumpPtr
        sta     BackrefLen

        ; Get backref source index
        lda     (pCompressedDataL),y
        jsr     BumpPtr
        sty     LzssSrcIdx
        tay

        ; Process the backref
@backref_loop:
        lda     LzssBuf,y
        iny
        sta     LzssBuf,x
        inx
        jsr     JsrInd
        dec     BackrefLen
        bne     @backref_loop

        ldy     LzssSrcIdx

@chunk_processed:
        lda     LzssFlags
        dec     LzssFlagCount
        bne     @process_8_chunks
        jmp     @outer

@end:
        rts


BumpPtr:
        iny
        bne     +
        inc     pCompressedDataH
:
        rts
